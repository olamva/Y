type Query {
  getPosts(page: Int!, filter: PostFilter!, limit: Int!): [PostItem!]!
  getPost(id: ID!): Post
  getRepostsByUser(username: String!, page: Int!, limit: Int!): [Repost!]!
  getComments(postID: ID!, page: Int!): [Comment!]!
  getUser(username: String!): User
  getUsers(page: Int!, excludeFollowing: Boolean, filter: String): [User!]!
  searchPosts(query: String!, page: Int!): [Post!]!
  searchUsers(query: String!, page: Int!, limit: Int!): [User!]!
  searchHashtags(query: String!, page: Int!, limit: Int!): [TrendingHashtag!]!
  getPostsByIds(ids: [ID!]!, page: Int!, limit: Int!): [Post!]!
  getComment(id: ID!): Comment
  getCommentsByIds(ids: [ID!]!, page: Int!): [Comment!]!
  getParent(parentID: ID!, parentType: String!): Parent
  getParentsByIds(parents: [ParentInput!]!): [Parent!]!
  getTrendingHashtags(page: Int!, limit: Int): [TrendingHashtag!]!
  getContentByHashtag(hashtag: String!, page: Int!): [Parent!]!
  getNotifications(page: Int!, limit: Int!): [Notification!]!
}

union PostItem = Post | Repost

union Parent = Post | Comment

enum PostFilter {
  LATEST
  FOLLOWING
  POPULAR
  CONTROVERSIAL
}

enum VerifiedTiers {
  UNVERIFIED
  VERIFIED
  MADS
  DEVELOPER
}

input ParentInput {
  id: ID!
  type: String!
}

scalar Upload

type Post {
  id: ID!
  body: String
  originalBody: String
  author: User!
  amtLikes: Int!
  amtComments: Int!
  amtReposts: Int!
  createdAt: String!
  imageUrl: String
  hashTags: [String!]!
  mentionedUsers: [User!]!
}

type Comment {
  id: ID!
  body: String
  originalBody: String
  author: User!
  parentID: ID!
  parentType: String!
  amtLikes: Int!
  amtComments: Int!
  amtReposts: Int!
  createdAt: String!
  imageUrl: String
  hashTags: [String!]!
  mentionedUsers: [User!]!
}

type TrendingHashtag {
  tag: String!
  count: Int!
}

type User {
  id: ID!
  username: String!
  firstName: String
  lastName: String
  biography: String
  postIds: [ID!]!
  likedPostIds: [ID!]!
  mentionedPostIds: [ID!]!
  repostedPostIds: [ID!]!
  commentIds: [ID!]!
  likedCommentIds: [ID!]!
  mentionedCommentIds: [ID!]!
  following: [User!]!
  followers: [User!]!
  profilePicture: String
  backgroundPicture: String
  verified: VerifiedTiers!
}

type Repost {
  id: ID!
  author: User!
  originalID: ID!
  originalType: String!
  originalAuthor: User!
  repostedAt: String!
  body: String
  originalBody: String
  amtLikes: Int!
  amtComments: Int!
  amtReposts: Int!
  createdAt: String!
  imageUrl: String
  hashTags: [String!]!
  mentionedUsers: [User!]!
  parentID: ID
  parentType: String
}

type Mutation {
  createPost(body: String, file: Upload): Post!
  repost(id: ID!, type: String!): Repost!
  unrepost(id: ID!): Repost!
  editPost(id: ID!, body: String, file: Upload): Post!
  editComment(id: ID!, body: String, file: Upload): Comment!
  createComment(body: String, parentID: ID!, parentType: String!, file: Upload): Comment!
  deletePost(id: ID!): Post!
  deleteComment(id: ID!, parentID: ID!, parentType: String!): Comment!
  likePost(postID: ID!): Post!
  unlikePost(postID: ID!): Post!
  likeComment(id: ID!): Comment!
  unlikeComment(id: ID!): Comment!
  followUser(username: String!): User!
  unfollowUser(username: String!): User!
  register(username: String!, password: String!): String!
  login(username: String!, password: String!): String!
  deleteUser(username: String!): User!
  changeProfilePicture(file: Upload): User!
  changeBackgroundPicture(file: Upload): User!
  updateProfile(firstName: String, lastName: String, biography: String): User!
  deleteNotification(id: ID!): Notification
  deleteAllNotifications: [Notification!]
}

type Notification {
  id: ID!
  type: String!
  sender: User!
  recipient: User!
  createdAt: String!
  postID: ID
  postType: String
}
